// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GAME.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GAME {

  /// <summary>Holder for reflection information generated from GAME.proto</summary>
  public static partial class GAMEReflection {

    #region Descriptor
    /// <summary>File descriptor for GAME.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GAMEReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpHQU1FLnByb3RvEgRHQU1FIlEKCVVTRVJfSU5GTxILCgNrZXkYASABKAMS",
            "CgoCaHAYAiABKAUSDQoFcG9zX3gYAyABKAISDQoFcG9zX3kYBCABKAISDQoF",
            "cG9zX3oYBSABKAIiEAoOQ1NfRU5URVJfRklFTEQiUQoOU0NfRU5URVJfRklF",
            "TEQSDgoGcmVzdWx0GAEgASgIEgoKAmVjGAIgASgJEiMKCnVzZXJfaW5mb3MY",
            "AyADKAsyDy5HQU1FLlVTRVJfSU5GTyJuChNTQ19OT1RJX0VOVEVSX0ZJRUxE",
            "EgsKA2tleRgBIAEoAxIKCgJocBgCIAEoBRINCgVwb3NfeBgDIAEoAhINCgVw",
            "b3NfeRgEIAEoAhINCgVwb3NfehgFIAEoAhIRCgl0aW1lc3RhbXAYBiABKAMi",
            "HQoOQ1NfTEVBVkVfRklFTEQSCwoDa2V5GAEgASgDIiIKE1NDX05PVElfTEVB",
            "VkVfRklFTEQSCwoDa2V5GAEgASgDIowBCg5DU19NT1ZFX09CSkVDVBINCgVw",
            "b3NfeBgBIAEoAhINCgVwb3NfeRgCIAEoAhINCgVwb3NfehgDIAEoAhINCgVy",
            "b3RfeBgEIAEoAhINCgVyb3RfeRgFIAEoAhINCgVyb3RfehgGIAEoAhINCgVy",
            "b3RfdxgHIAEoAhIRCgl0aW1lc3RhbXAYCCABKAMingEKE1NDX05PVElfTU9W",
            "RV9PQkpFQ1QSCwoDa2V5GAEgASgDEg0KBXBvc194GAIgASgCEg0KBXBvc195",
            "GAMgASgCEg0KBXBvc196GAQgASgCEg0KBXJvdF94GAUgASgCEg0KBXJvdF95",
            "GAYgASgCEg0KBXJvdF96GAcgASgCEg0KBXJvdF93GAggASgCEhEKCXRpbWVz",
            "dGFtcBgJIAEoAyIcCgdDU19QSU5HEhEKCXRpbWVzdGFtcBgBIAEoAyIcCgdT",
            "Q19QSU5HEhEKCXRpbWVzdGFtcBgBIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.USER_INFO), global::GAME.USER_INFO.Parser, new[]{ "Key", "Hp", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_ENTER_FIELD), global::GAME.CS_ENTER_FIELD.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_ENTER_FIELD), global::GAME.SC_ENTER_FIELD.Parser, new[]{ "Result", "Ec", "UserInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_ENTER_FIELD), global::GAME.SC_NOTI_ENTER_FIELD.Parser, new[]{ "Key", "Hp", "PosX", "PosY", "PosZ", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_LEAVE_FIELD), global::GAME.CS_LEAVE_FIELD.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_LEAVE_FIELD), global::GAME.SC_NOTI_LEAVE_FIELD.Parser, new[]{ "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_MOVE_OBJECT), global::GAME.CS_MOVE_OBJECT.Parser, new[]{ "PosX", "PosY", "PosZ", "RotX", "RotY", "RotZ", "RotW", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_NOTI_MOVE_OBJECT), global::GAME.SC_NOTI_MOVE_OBJECT.Parser, new[]{ "Key", "PosX", "PosY", "PosZ", "RotX", "RotY", "RotZ", "RotW", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.CS_PING), global::GAME.CS_PING.Parser, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GAME.SC_PING), global::GAME.SC_PING.Parser, new[]{ "Timestamp" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class USER_INFO : pb::IMessage<USER_INFO> {
    private static readonly pb::MessageParser<USER_INFO> _parser = new pb::MessageParser<USER_INFO>(() => new USER_INFO());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<USER_INFO> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public USER_INFO() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public USER_INFO(USER_INFO other) : this() {
      key_ = other.key_;
      hp_ = other.hp_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public USER_INFO Clone() {
      return new USER_INFO(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 3;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 4;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 5;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as USER_INFO);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(USER_INFO other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Hp != other.Hp) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (PosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosZ);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(USER_INFO other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 29: {
            PosX = input.ReadFloat();
            break;
          }
          case 37: {
            PosY = input.ReadFloat();
            break;
          }
          case 45: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_ENTER_FIELD : pb::IMessage<CS_ENTER_FIELD> {
    private static readonly pb::MessageParser<CS_ENTER_FIELD> _parser = new pb::MessageParser<CS_ENTER_FIELD>(() => new CS_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD(CS_ENTER_FIELD other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_ENTER_FIELD Clone() {
      return new CS_ENTER_FIELD(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SC_ENTER_FIELD : pb::IMessage<SC_ENTER_FIELD> {
    private static readonly pb::MessageParser<SC_ENTER_FIELD> _parser = new pb::MessageParser<SC_ENTER_FIELD>(() => new SC_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD(SC_ENTER_FIELD other) : this() {
      result_ = other.result_;
      ec_ = other.ec_;
      userInfos_ = other.userInfos_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_ENTER_FIELD Clone() {
      return new SC_ENTER_FIELD(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private bool result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "ec" field.</summary>
    public const int EcFieldNumber = 2;
    private string ec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ec {
      get { return ec_; }
      set {
        ec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_infos" field.</summary>
    public const int UserInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GAME.USER_INFO> _repeated_userInfos_codec
        = pb::FieldCodec.ForMessage(26, global::GAME.USER_INFO.Parser);
    private readonly pbc::RepeatedField<global::GAME.USER_INFO> userInfos_ = new pbc::RepeatedField<global::GAME.USER_INFO>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GAME.USER_INFO> UserInfos {
      get { return userInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Ec != other.Ec) return false;
      if(!userInfos_.Equals(other.userInfos_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != false) hash ^= Result.GetHashCode();
      if (Ec.Length != 0) hash ^= Ec.GetHashCode();
      hash ^= userInfos_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != false) {
        output.WriteRawTag(8);
        output.WriteBool(Result);
      }
      if (Ec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ec);
      }
      userInfos_.WriteTo(output, _repeated_userInfos_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != false) {
        size += 1 + 1;
      }
      if (Ec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ec);
      }
      size += userInfos_.CalculateSize(_repeated_userInfos_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Result != false) {
        Result = other.Result;
      }
      if (other.Ec.Length != 0) {
        Ec = other.Ec;
      }
      userInfos_.Add(other.userInfos_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Result = input.ReadBool();
            break;
          }
          case 18: {
            Ec = input.ReadString();
            break;
          }
          case 26: {
            userInfos_.AddEntriesFrom(input, _repeated_userInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_ENTER_FIELD : pb::IMessage<SC_NOTI_ENTER_FIELD> {
    private static readonly pb::MessageParser<SC_NOTI_ENTER_FIELD> _parser = new pb::MessageParser<SC_NOTI_ENTER_FIELD>(() => new SC_NOTI_ENTER_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_ENTER_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_ENTER_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_ENTER_FIELD(SC_NOTI_ENTER_FIELD other) : this() {
      key_ = other.key_;
      hp_ = other.hp_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_ENTER_FIELD Clone() {
      return new SC_NOTI_ENTER_FIELD(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 3;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 4;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 5;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 6;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_ENTER_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_ENTER_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Hp != other.Hp) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (PosX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosZ);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_ENTER_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 29: {
            PosX = input.ReadFloat();
            break;
          }
          case 37: {
            PosY = input.ReadFloat();
            break;
          }
          case 45: {
            PosZ = input.ReadFloat();
            break;
          }
          case 48: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_LEAVE_FIELD : pb::IMessage<CS_LEAVE_FIELD> {
    private static readonly pb::MessageParser<CS_LEAVE_FIELD> _parser = new pb::MessageParser<CS_LEAVE_FIELD>(() => new CS_LEAVE_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_LEAVE_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD(CS_LEAVE_FIELD other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_LEAVE_FIELD Clone() {
      return new CS_LEAVE_FIELD(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_LEAVE_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_LEAVE_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_LEAVE_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_LEAVE_FIELD : pb::IMessage<SC_NOTI_LEAVE_FIELD> {
    private static readonly pb::MessageParser<SC_NOTI_LEAVE_FIELD> _parser = new pb::MessageParser<SC_NOTI_LEAVE_FIELD>(() => new SC_NOTI_LEAVE_FIELD());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_LEAVE_FIELD> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_LEAVE_FIELD() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_LEAVE_FIELD(SC_NOTI_LEAVE_FIELD other) : this() {
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_LEAVE_FIELD Clone() {
      return new SC_NOTI_LEAVE_FIELD(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_LEAVE_FIELD);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_LEAVE_FIELD other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_LEAVE_FIELD other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_MOVE_OBJECT : pb::IMessage<CS_MOVE_OBJECT> {
    private static readonly pb::MessageParser<CS_MOVE_OBJECT> _parser = new pb::MessageParser<CS_MOVE_OBJECT>(() => new CS_MOVE_OBJECT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_MOVE_OBJECT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MOVE_OBJECT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MOVE_OBJECT(CS_MOVE_OBJECT other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      rotX_ = other.rotX_;
      rotY_ = other.rotY_;
      rotZ_ = other.rotZ_;
      rotW_ = other.rotW_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_MOVE_OBJECT Clone() {
      return new CS_MOVE_OBJECT(this);
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "rot_x" field.</summary>
    public const int RotXFieldNumber = 4;
    private float rotX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotX {
      get { return rotX_; }
      set {
        rotX_ = value;
      }
    }

    /// <summary>Field number for the "rot_y" field.</summary>
    public const int RotYFieldNumber = 5;
    private float rotY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotY {
      get { return rotY_; }
      set {
        rotY_ = value;
      }
    }

    /// <summary>Field number for the "rot_z" field.</summary>
    public const int RotZFieldNumber = 6;
    private float rotZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotZ {
      get { return rotZ_; }
      set {
        rotZ_ = value;
      }
    }

    /// <summary>Field number for the "rot_w" field.</summary>
    public const int RotWFieldNumber = 7;
    private float rotW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotW {
      get { return rotW_; }
      set {
        rotW_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 8;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_MOVE_OBJECT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_MOVE_OBJECT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (RotX != other.RotX) return false;
      if (RotY != other.RotY) return false;
      if (RotZ != other.RotZ) return false;
      if (RotW != other.RotW) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (RotX != 0F) hash ^= RotX.GetHashCode();
      if (RotY != 0F) hash ^= RotY.GetHashCode();
      if (RotZ != 0F) hash ^= RotZ.GetHashCode();
      if (RotW != 0F) hash ^= RotW.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
      if (RotX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RotX);
      }
      if (RotY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotY);
      }
      if (RotZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotZ);
      }
      if (RotW != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotW);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (RotX != 0F) {
        size += 1 + 4;
      }
      if (RotY != 0F) {
        size += 1 + 4;
      }
      if (RotZ != 0F) {
        size += 1 + 4;
      }
      if (RotW != 0F) {
        size += 1 + 4;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_MOVE_OBJECT other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.RotX != 0F) {
        RotX = other.RotX;
      }
      if (other.RotY != 0F) {
        RotY = other.RotY;
      }
      if (other.RotZ != 0F) {
        RotZ = other.RotZ;
      }
      if (other.RotW != 0F) {
        RotW = other.RotW;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
          case 37: {
            RotX = input.ReadFloat();
            break;
          }
          case 45: {
            RotY = input.ReadFloat();
            break;
          }
          case 53: {
            RotZ = input.ReadFloat();
            break;
          }
          case 61: {
            RotW = input.ReadFloat();
            break;
          }
          case 64: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_NOTI_MOVE_OBJECT : pb::IMessage<SC_NOTI_MOVE_OBJECT> {
    private static readonly pb::MessageParser<SC_NOTI_MOVE_OBJECT> _parser = new pb::MessageParser<SC_NOTI_MOVE_OBJECT>(() => new SC_NOTI_MOVE_OBJECT());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_NOTI_MOVE_OBJECT> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_MOVE_OBJECT() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_MOVE_OBJECT(SC_NOTI_MOVE_OBJECT other) : this() {
      key_ = other.key_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      rotX_ = other.rotX_;
      rotY_ = other.rotY_;
      rotZ_ = other.rotZ_;
      rotW_ = other.rotW_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_NOTI_MOVE_OBJECT Clone() {
      return new SC_NOTI_MOVE_OBJECT(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 2;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 3;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 4;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "rot_x" field.</summary>
    public const int RotXFieldNumber = 5;
    private float rotX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotX {
      get { return rotX_; }
      set {
        rotX_ = value;
      }
    }

    /// <summary>Field number for the "rot_y" field.</summary>
    public const int RotYFieldNumber = 6;
    private float rotY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotY {
      get { return rotY_; }
      set {
        rotY_ = value;
      }
    }

    /// <summary>Field number for the "rot_z" field.</summary>
    public const int RotZFieldNumber = 7;
    private float rotZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotZ {
      get { return rotZ_; }
      set {
        rotZ_ = value;
      }
    }

    /// <summary>Field number for the "rot_w" field.</summary>
    public const int RotWFieldNumber = 8;
    private float rotW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotW {
      get { return rotW_; }
      set {
        rotW_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_NOTI_MOVE_OBJECT);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_NOTI_MOVE_OBJECT other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (RotX != other.RotX) return false;
      if (RotY != other.RotY) return false;
      if (RotZ != other.RotZ) return false;
      if (RotW != other.RotW) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (RotX != 0F) hash ^= RotX.GetHashCode();
      if (RotY != 0F) hash ^= RotY.GetHashCode();
      if (RotZ != 0F) hash ^= RotZ.GetHashCode();
      if (RotW != 0F) hash ^= RotW.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (PosX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosZ);
      }
      if (RotX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RotX);
      }
      if (RotY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RotY);
      }
      if (RotZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RotZ);
      }
      if (RotW != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RotW);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (RotX != 0F) {
        size += 1 + 4;
      }
      if (RotY != 0F) {
        size += 1 + 4;
      }
      if (RotZ != 0F) {
        size += 1 + 4;
      }
      if (RotW != 0F) {
        size += 1 + 4;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_NOTI_MOVE_OBJECT other) {
      if (other == null) {
        return;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.RotX != 0F) {
        RotX = other.RotX;
      }
      if (other.RotY != 0F) {
        RotY = other.RotY;
      }
      if (other.RotZ != 0F) {
        RotZ = other.RotZ;
      }
      if (other.RotW != 0F) {
        RotW = other.RotW;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 21: {
            PosX = input.ReadFloat();
            break;
          }
          case 29: {
            PosY = input.ReadFloat();
            break;
          }
          case 37: {
            PosZ = input.ReadFloat();
            break;
          }
          case 45: {
            RotX = input.ReadFloat();
            break;
          }
          case 53: {
            RotY = input.ReadFloat();
            break;
          }
          case 61: {
            RotZ = input.ReadFloat();
            break;
          }
          case 69: {
            RotW = input.ReadFloat();
            break;
          }
          case 72: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CS_PING : pb::IMessage<CS_PING> {
    private static readonly pb::MessageParser<CS_PING> _parser = new pb::MessageParser<CS_PING>(() => new CS_PING());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CS_PING> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING(CS_PING other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CS_PING Clone() {
      return new CS_PING(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CS_PING);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CS_PING other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CS_PING other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SC_PING : pb::IMessage<SC_PING> {
    private static readonly pb::MessageParser<SC_PING> _parser = new pb::MessageParser<SC_PING>(() => new SC_PING());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SC_PING> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GAME.GAMEReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING(SC_PING other) : this() {
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SC_PING Clone() {
      return new SC_PING(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SC_PING);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SC_PING other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SC_PING other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
